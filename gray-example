#!/usr/bin/env python3

ops = '+-*/'
N = len(ops)
seen = set()
prev = None


def emit(vals):
    vals = tuple(vals)
    print(' '.join(ops[v] for v in vals))
    assert(vals not in seen)
    seen.add(vals)
    global prev
    if prev:
        changed = sum(1 for a, b in zip(vals, prev) if a != b)
        assert(changed == 1)
    prev = vals


def recurse(indices, depth):
    if depth == -1:
        emit(indices)
        return

    old = indices[depth]
    for delta in range(N):
        indices[depth] = (old + delta) % N
        recurse(indices, depth-1)

L = 3
recurse([0]*L, L-1)
assert(len(seen) == N**L)
