#!/usr/bin/env python3

ops = '+-*/'
N = len(ops)
seen = set()
prev = None


def emit(vals, i_changed):
    vals = tuple(vals)
    print(vals, 'changed:', i_changed)

    assert(vals not in seen)
    seen.add(vals)
    global prev
    if prev:
        changed = sum(1 for a, b in zip(vals, prev) if a != b)
        assert(changed == 1)
        assert(vals[i_changed] != prev[i_changed])
    prev = vals


def recurse(indices, depth, i_changed):
    """
    This is a demonstration of a simple n-ary-Gray code recursive iterator.
    :param indices: The digits of the generated Gray code number, 0-3
    :param depth: The current recursion depth, from n-1 through -1
    :param i_changed: The index of the only digit that has changed.
    """
    if depth == len(indices):
        emit(indices, i_changed)
        return

    old = indices[depth]
    for delta in range(N):
        indices[depth] = (old + delta) % N
        recurse(indices, depth+1, i_changed)
        i_changed = depth

L = 3
recurse([0]*L, 0, 'init')
assert(len(seen) == N**L)
