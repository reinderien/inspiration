#!/usr/bin/env python3

from itertools import permutations
from math import factorial

print('Stock permutations:')
prev = None
for p in permutations(range(4)):
    print(p, end='')
    if prev:
        n_swaps = sum(1 for u,v in zip(prev, p) if u!=v)
        print(' %d changes' % n_swaps, end='')
    print()
    prev = p


print("Heap's algorithm:")
# See https://en.wikipedia.org/wiki/Heap%27s_algorithm

prev = None
seen = set()

def emit(A):
    A = tuple(A)
    print(A, end='')
    global prev, seen
    if prev is not None:
        n_swaps = sum(1 for u,v in zip(prev,A) if u!=v)
        print(' %d changes' % n_swaps, end='')
    print()
    assert(A not in seen)
    seen.add(A)
    prev = A

def heap_recurse(A, n=None):
    if n is None:
        n = len(A)
    if n == 1:
        emit(A)
        return
    for i in range(n-1):
        heap_recurse(A, n-1)
        if n%2:
            A[0], A[n-1] = A[n-1], A[0]
        else:
            A[i], A[n-1] = A[n-1], A[i]
    heap_recurse(A, n-1)

heap_recurse(list(range(4)))
assert(len(seen) == factorial(4))


print("Modified Heap's algorithm:")
# i -> n-1-i to reverse order of swapping
prev = None
seen = set()

def mheap_recurse(A, n=None):
    N = len(A)
    if n is None:
        n = N
    if n == 1:
        emit(A)
        return
    for i in range(n-1):
        mheap_recurse(A, n-1)
        if n%2:
            A[N-1], A[N-n] = A[N-n], A[N-1]
        else:
            A[N-1-i], A[N-n] = A[N-n], A[N-1-i]
    mheap_recurse(A, n-1)

size = 4
mheap_recurse(list(range(size)))
assert(len(seen) == factorial(size))
